{"version":3,"sources":["jquery.grids.js"],"names":[],"mappingsfile":"jquery.grids.js","sourcesContent":["\n(function($) {\n\n    // Plugin\n    $.fn.imagesGrid = function(options) {\n\n        var args = arguments;\n\n        return this.each(function() {\n\n            if ($.isPlainObject(options)) {\n                // Create ImagesGrid\n                var cfg = $.extend({}, $.fn.imagesGrid.defaults, options);\n                cfg.element = $(this);\n                this._imgGrid = new ImagesGrid(cfg);\n                this._imgGrid.render();\n                return;\n            }\n\n            if (this._imgGrid) {\n                switch (options) {\n                    case 'modal.open':\n                        this._imgGrid.modal.open(args[1]);\n                        break;\n                    case 'modal.close':\n                        this._imgGrid.modal.close();\n                        break;\n                }\n            }\n\n        });\n\n    };\n\n    // Plugin default options\n    $.fn.imagesGrid.defaults = {\n        images: [],\n        cells: 5,\n        align: false,\n        nextOnClick: true,\n        getViewAllText: function(imagesCount) {\n            return '+ ' + imagesCount +'';\n        },\n        onGridRendered: $.noop,\n        onGridItemRendered: $.noop,\n        onGridLoaded: $.noop,\n        onGridImageLoaded: $.noop,\n        onModalOpen: $.noop,\n        onModalClose: $.noop,\n        onModalImageClick: $.noop\n    };\n\n    /*\n      ImagesGrid constructor\n       *cfg         - Configuration object\n       *cfg.element - jQuery element\n       *cfg.images  - Array of images urls of images option objects\n        cfg.align   - Aling diff-size images\n        cfg.cells   - Max grid cells (1-6)\n        cfg.getViewAllText     - Returns text for \"view all images\" link,\n        cfg.onGridRendered     - Called when grid items added to the DOM\n        cfg.onGridItemRendered - Called when grid item added to the DOM\n        cfg.onGridLoaded       - Called when grid images loaded\n        cfg.onGridImageLoaded  - Called when grid image loaded\n    */\n    function ImagesGrid(cfg) {\n\n        cfg = cfg || {};\n\n        this.images = cfg.images;\n        this.isAlign = cfg.align;\n        this.maxGridCells = (cfg.cells < 1)? 1: (cfg.cells > 6)? 6: cfg.cells;\n        this.imageLoadCount = 0;\n        this.modal = null;\n\n        this.$window = $(window);\n        this.$el = cfg.element;\n        this.$gridItems = [];\n\n        this.render = function() {\n\n            this.setGridClass();\n            this.renderGridItems();\n\n            this.modal = new ImagesGridModal({\n                images: cfg.images,\n                nextOnClick: cfg.nextOnClick,\n                onModalOpen: cfg.onModalOpen,\n                onModalClose: cfg.onModalClose,\n                onModalImageClick: cfg.onModalImageClick\n            });\n\n            this.$window.on('resize', this.resize.bind(this));\n\n        };\n\n        this.setGridClass = function() {\n\n            this.$el.removeClass(function(index, classNames) {\n                if (/(imgs-grid-\\d)/.test(classNames)) {\n                    return RegExp.$1;\n                }\n            });\n\n            var cellsCount = (this.images.length > this.maxGridCells)?\n                this.maxGridCells: this.images.length;\n\n            this.$el.addClass('imgs-grid imgs-grid-' + cellsCount);\n\n        };\n\n        this.renderGridItems = function() {\n\n            if (!this.images) {\n                return;\n            }\n\n            console.log()\n\n            this.$el.empty();\n            this.$gridItems = [];\n\n            this.$el.append('<div class=\"s-height\"></div>');\n            if(this.images.length > 2) {\n                this.$el.append('<div class=\"f-height\"></div>');\n            } else {\n                $('.s-height').css({\n                    'height': '300px'\n                });\n            }\n\n            for (var i = 0; i < this.images.length; ++i) {\n                if (i == this.maxGridCells) {\n                    break;\n                }\n                this.renderGridItem(this.images[i], i);\n            }\n\n            if (this.images.length > this.maxGridCells) {\n                this.renderViewAll();\n            }\n\n            cfg.onGridRendered(this.$el);\n            \n            $('#cover-show').append(\n                $('<div>', {\n                    class: 'comboShow',\n                    click: this.imageClick.bind(this),\n                })\n            );\n        };\n\n        this.renderGridItem = function(image, index) {\n\n            var src = image,\n                alt = '',\n                title = '';\n\n            if ($.isPlainObject(image)) {\n                src = image.src;\n                alt = image.alt || '';\n                title = image.title || '';\n            }\n\n            var item = $('<div>', {\n                class: 'imgs-grid-image',\n                click: this.imageClick.bind(this),\n                data: { index: index }\n            });\n\n            var self = this;\n\n            item.append(\n                $('<div>', {\n                    class: 'image-wrap'\n                }).append(\n                    $('<img>', {\n                        src: src,\n                        alt: alt,\n                        title: title,\n                        load: function(event) {\n                            self.imageLoaded(event, $(this), image);\n                        }\n                    })\n                )\n            );\n\n            this.$gridItems.push(item);\n\n            // this.$el.append(item);\n\n            if(index < 3) {\n                $('.s-height').append(item);\n            }else {\n                $('.f-height').append(item);\n            }\n\n\n            cfg.onGridItemRendered(item, image);\n\n        };\n\n        this.renderViewAll = function() {\n\n            this.$el.find('.imgs-grid-image:last .image-wrap').append(\n                $('<div>', {\n                    class: 'view-all'\n                }).append(\n                    $('<span>', {\n                        class: 'view-all-cover',\n                    }),\n                    $('<span>', {\n                        class: 'view-all-text',\n                        text: cfg.getViewAllText(this.images.length)\n                    })\n                )\n            );\n\n        };\n\n        this.resize = function(event) {\n            if (this.isAlign) {\n                this.align();\n            }\n        };\n\n        this.imageClick = function(event) {\n            var imageIndex = $(event.currentTarget).data('index');\n            this.modal.open(imageIndex);\n        };\n\n        this.imageLoaded = function(event, imageEl, image) {\n\n            ++this.imageLoadCount;\n\n            if (this.imageLoadCount == this.$gridItems.length) {\n                this.imageLoadCount = 0;\n                this.allImagesLoaded()\n            }\n\n            cfg.onGridImageLoaded(event, imageEl, image)\n\n        };\n\n        this.allImagesLoaded = function() {\n\n            if (this.isAlign) {\n                this.align();\n            }\n\n            cfg.onGridLoaded(this.$el);\n\n        };\n\n        this.align = function() {\n\n            var len = this.$gridItems.length;\n\n            switch (len) {\n                case 2:\n                case 3:\n                    this.alignItems(this.$gridItems);\n                    break;\n                case 4:\n                    this.alignItems(this.$gridItems.slice(0, 2));\n                    this.alignItems(this.$gridItems.slice(2));\n                    break;\n                case 5:\n                case 6:\n                    this.alignItems(this.$gridItems.slice(0, 3));\n                    this.alignItems(this.$gridItems.slice(3));\n                    break;\n            }\n\n        };\n\n        this.alignItems = function(items) {\n\n            var height = items.map(function(item) {\n                return item.find('img').height();\n            });\n\n            var itemHeight = Math.min.apply(null, height);\n\n            $(items).each(function() {\n\n                var item = $(this),\n                    imgWrap = item.find('.image-wrap'),\n                    img = item.find('img'),\n                    imgHeight = img.height();\n\n                imgWrap.height(itemHeight);\n\n                if (imgHeight > itemHeight) {\n                    var top = Math.floor((imgHeight - itemHeight) / 2);\n                    img.css({ top: -top });\n                }\n\n            });\n\n        };\n\n    }\n\n    /*\n      ImagesGridModal constructor\n       *cfg             - Configuration object\n       *cfg.images      - Array of string or objects\n        cfg.nextOnClick - Show next image when click on modal image\n        cfg.onModalOpen       - Called when modal opened\n        cfg.onModalClose      - Called when modal closed\n        cfg.onModalImageClick - Called on modal image click\n    */\n    function ImagesGridModal(cfg) {\n\n        this.images = cfg.images;\n        this.imageIndex = null;\n\n        this.$modal = null;\n        this.$indicator = null;\n        this.$document = $(document);\n\n        this.open = function(imageIndex) {\n\n            if (this.$modal && this.$modal.is(':visible')) {\n                return;\n            }\n\n            this.imageIndex = parseInt(imageIndex) || 0;\n\n            this.render();\n\n        };\n\n        this.close = function(event) {\n\n            if (!this.$modal) {\n                return;\n            }\n\n            this.$modal.animate({\n                opacity: 0\n            }, {\n                duration: 100,\n                complete: function() {\n\n                    this.$modal.remove();\n                    this.$modal = null;\n                    this.$indicator = null;\n                    this.imageIndex = null;\n\n                    cfg.onModalClose();\n\n                }.bind(this)\n            });\n\n            this.$document.off('keyup', this.keyUp);\n\n        };\n\n        this.render = function() {\n\n            this.renderModal();\n            this.renderCaption();\n            this.renderCloseButton();\n            this.renderInnerContainer();\n            this.renderIndicatorContainer();\n\n            this.keyUp = this.keyUp.bind(this);\n            this.$document.on('keyup', this.keyUp);\n\n            var self = this;\n\n            this.$modal.animate({\n                opacity: 1\n            }, {\n                duration: 100,\n                complete: function() {\n                    cfg.onModalOpen(self.$modal);\n                }\n            });\n\n        };\n\n        this.renderModal = function() {\n            this.$modal = $('<div>', {\n                class: 'imgs-grid-modal'\n            }).appendTo('body');\n        };\n\n        this.renderCaption = function() {\n\n            this.$caption = $('<div>', {\n                class: 'SlideshowModalContent__controls'\n                // text: this.getImageCaption(this.imageIndex)\n            }).appendTo(this.$modal);\n\n            this.$caption.append('<div class=\"SlideshowModalContent__controls-inner\">'+\n                '  <div class=\"SlideshowModalContent__share-save-controls\">'+\n                    '<div class=\"SlideshowModalContent__social-share-widget\">'+\n                      '<span class=\"share-title\">'+\n                        'Share:'+\n                      '</span>'+\n                        '<span class=\"share-triggers\">'+\n                        '<a class=\"share-btn link-icon\" href=\"#\">'+\n                          '<span class=\"screen-reader-only\">Email</span>'+\n                          '<i class=\"fa fa-envelope\"></i>'+\n                        '</a>'+\n                        '<a class=\"share-btn messenger-btn link-icon messenger-btn\" data-network=\"twitter\" rel=\"nofollow\" title=\"Messenger\" href=\"\" target=\"_blank\">'+\n                          '<span class=\"screen-reader-only\">Twitter</span>'+\n                          '<i class=\"fa fa-twitter\"></i>'+\n                        '</a>'+\n                        '<a class=\"share-btn link-icon\" data-network=\"facebook\" rel=\"nofollow\" title=\"Facebook\" href=\"\" target=\"_blank\">'+\n                          '<span class=\"screen-reader-only\">Facebook</span>'+\n                          '<i class=\"fa fa-facebook\"></i>'+\n                        '</a>'+\n                        '<a class=\"share-btn embed-btn link-icon\" data-network=\"embed\" rel=\"nofollow\" title=\"Embed This Listing\" data-photo-index=\"0\" href=\"#\">'+\n                          '<span class=\"screen-reader-only\">Google Plus</span>'+\n                          '<i class=\"fa fa-google-plus\"></i>'+\n                        '</a>'+\n                        '<a class=\"share-btn link-icon\" data-network=\"pinterest\" rel=\"nofollow\" title=\"Pinterest\" href=\"\" target=\"_blank\">'+\n                          '<span class=\"screen-reader-only\">Pinterest</span>'+\n                          '<i class=\"fa fa-pinterest\"></i>'+\n                        '</a>'+\n                     ' </span>'+\n                    '</div>'+\n                    '<div class=\"SlideshowModalContent__seperator show-lg-inline-block\"></div>'+\n                    '<div class=\"SlideshowModalContent__wishlist-button\">'+\n                        '<span class=\"rich-toggle wish_list_button wishlist-button not_saved\">'+\n                            '<input type=\"checkbox\" id=\"wishlist-widget-6873653\" name=\"wishlist-widget-6873653\">'+\n                            '<label for=\"wishlist-widget-6873653\" class=\"hide-sm\">'+\n                                '<i name=\"heart\" class=\"fa fa-heart rich-toggle-checked\"></i>'+\n                                '<i name=\"heart\" class=\"fa fa-heart wishlist-heart-unchecked rich-toggle-unchecked\"></i>'+\n                                '<i name=\"heart-alt\" color=\"white\" id=\"wishlist-widget-icon-6873653\" class=\"fa fa-heart-o\"></i>'+\n                            '</label> Save to Wish List'+\n                        '</span>'+\n                    '</div>'+\n                  '</div>'+\n                '</div>');\n        };\n\n        this.renderCloseButton = function() {\n            this.$modal.append($('<div>', {\n                class: 'modal-close',\n                click: this.close.bind(this)\n            }));\n        };\n\n        this.renderInnerContainer = function() {\n\n            var image = this.getImage(this.imageIndex),\n                self = this;\n\n            this.$modal.append(\n                $('<div>', {\n                    class: 'modal-inner'\n                }).append(\n                    $('<div>', {\n                        class: 'Slideshow__intrinsic-outer'\n                    }).append(\n                        $('<div>', {\n                            class: 'Slideshow__intrinsic-inner'\n                        }).append(\n                            $('<div>', {\n                                class: 'Slideshow__images'\n                            }).append(\n                                $('<div>', {\n                                    class: 'media-photo media-photo-block'\n                                }).append(\n                                    $('<div>', {\n                                        class: 'modal-image'\n                                    }).append(\n                                        $('<img>', {\n                                            src: image.src,\n                                            alt: image.alt,\n                                            title: image.title,\n                                            click: function(event) {\n                                                self.imageClick(event, $(this), image);\n                                            }\n                                        })\n                                    )\n                                )\n                            )\n                        )\n                    ),\n                    $('<div>', {\n                        class: 'modal-control left',\n                        click: this.prev.bind(this)\n                    }).append(\n                        $('<div>', {\n                            class: 'arrow left'\n                        })\n                    ),\n                    $('<div>', {\n                        class: 'modal-control right',\n                        click: this.next.bind(this)\n                    }).append(\n                        $('<div>', {\n                            class: 'arrow right'\n                        })\n                    )\n                )\n            );\n\n            if (this.images.length <= 1) {\n                this.$modal.find('.modal-control').hide();\n            }\n\n        };\n\n        this.renderIndicatorContainer = function() {\n\n            if (this.images.length == 1) {\n                return;\n            }\n\n\n            var list = $('<ul>', {\n                class: 'SlideshowNav__thumbnails-slide-panel'\n            });\n\n            for (var i = 0; i < this.images.length; ++i) {\n                list.append($('<li>', {\n                    class: 'pull-left',\n                }).append(\n                        $('<div>', {\n                            class: 'media-photo media-slideshow ',\n                        }).append(\n                            $('<img>', {\n                                src: this.getImage(i).src,\n                                alt: this.getImage(i).alt,\n                                title: this.getImage(i).title,\n                                click: this.indicatorClick.bind(this),\n                                data: { index: i }\n                            })\n                        )\n                    )\n                );\n            }\n\n\n            this.$indicator = $('<div>', {\n                class: 'modal-indicator media-caption'\n            });\n\n            this.$indicator.append(\n                $('<div>', {\n                    class: 'SlideshowNav'\n                }).append(\n                    $('<div>',{\n                        class: 'SlideshowNav__inner SlideshowNav__inner--collapsed'\n                    }).append(\n                        $('<div>', {\n                            class: 'space'\n                        }).append(\n                            $('<div>', {\n                                class: 'SlideshowNav__caption-left'\n                            }).append(\n                                $('<div>', {\n                                    class: 'text-left row-caption'\n                                }).append(\n                                    $('<span>', {\n                                        text: (this.imageIndex+1)+'/'+this.images.length+': '+this.getImageCaption(this.imageIndex)\n                                    })\n                                )\n                            )\n                        ).append(\n                            $('<div>', {\n                                class: 'SlideshowNav__caption-right'\n                            }).append(\n                                $('<span>', {\n                                    text: 'Show photo list '\n                                })\n                            ).append(\n                                $('<i>', {\n                                    class: 'fa fa-caret-down'\n                                })\n                            )\n                        ).append(\n                            $('<div>', {\n                                class: 'clearfix'\n                            })\n                        ).append(\n                            $('<div>', {\n                                class: 'SlideshowNav__thumbnails-viewport'\n                            }).append(list)\n                        )\n                    )\n                )\n            )\n            this.$modal.append(this.$indicator);\n\n        };\n\n        this.prev = function() {\n            if (this.imageIndex > 0) {\n                --this.imageIndex;\n            } else {\n                this.imageIndex = this.images.length - 1;\n            }\n            this.updateImage();\n        };\n\n        this.next = function() {\n            if (this.imageIndex < this.images.length - 1) {\n                ++this.imageIndex;\n            } else {\n                this.imageIndex = 0;\n            }\n            this.updateImage();\n        };\n\n        this.updateImage = function() {\n\n            var image = this.getImage(this.imageIndex);\n\n            this.$modal.find('.modal-image img').attr({\n                src: image.src,\n                alt: image.alt,\n                title: image.title\n            });\n\n            this.$modal.find('.row-caption span').text(\n                (this.imageIndex + 1) +'/'+ this.images.length +': '+ image.caption\n            );\n\n            if (this.$indicator) {\n                var indicatorList = this.$indicator.find('ul');\n                indicatorList.children().removeClass('selected');\n                indicatorList.children().eq(this.imageIndex).addClass('selected');\n            }\n\n        };\n\n        this.imageClick = function(event, imageEl, image) {\n\n            if (cfg.nextOnClick) {\n                this.next();\n            }\n\n            cfg.onModalImageClick(event, imageEl, image);\n\n        };\n\n        this.indicatorClick = function(event) {\n            var index = $(event.target).data('index');\n            this.imageIndex = index;\n            this.updateImage();\n        };\n\n        this.keyUp = function(event) {\n            if (this.$modal) {\n                switch (event.keyCode) {\n                    case 27: // Esc\n                        this.close();\n                        break;\n                    case 37: // Left arrow\n                        this.prev();\n                        break;\n                    case 39: // Right arrow\n                        this.next();\n                        break;\n                }\n            }\n        };\n\n        this.getImage = function(index) {\n            var image = this.images[index];\n            if ($.isPlainObject(image)) {\n                return image;\n            } else {\n                return { src: image, alt: '', title: '' }\n            }\n        };\n\n        this.getImageCaption = function(imgIndex) {\n            var img = this.getImage(imgIndex);\n            return img.caption || '';\n        };\n\n    }\n\n})(jQuery);\n"],"sourceRoot":"/source/"}